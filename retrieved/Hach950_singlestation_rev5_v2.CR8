'CR800Series Datalogger
'To create a different opening program template, type in new
'instructions and select Template | Save as Default Template
'rev 3 changed units to cf and cfs as needed
'rev 4 variable elimination and name changes, commented out all rain
'variables and calculations
'

'date:
'program author:

'Declare Public Variables
PreserveVariables

Const ModbusCom = ComSDC7
Public ModbusInterval As Long = 5

Public PTemp,BatVolts
'Public rain
'Public twentyfourhr_rain
'Public event_rain
'Public seasonal_rain
Public Sample_pacing_volume
Public Interim_flow_total
Public Attempted_smpl_events As Long
Public SampleOn As Boolean
Public Event_flow
Public Sample_totalized_volume

Public modbusdata(4) As Float
Alias modbusdata(1) = Battery_950
Alias modbusdata(2) = Level_950
Alias modbusdata(3) = Flow_950
Alias modbusdata(4) = Flow_total_950

Public Attempted_smpl_events_reset As Boolean

Public Successful_Smpl,SampleCounter As Long
Public Flowrate_at_smpl_event

'Public event_rain_reset As Boolean
'Public seasonal_rain_reset As Boolean
Public Hach_flow_reset As Boolean
Public Sampling_Event_Reset As Boolean
Public Event_flow_reset As Boolean
Public Sample_count_reset As Boolean
Public master_reset As Boolean
Public execute As Boolean

Public battery_coms_result,level_coms_result,flow_coms_result,flow_tot_coms_result
Public flow_tot_reset_coms_result

Public battery_coms_fail_cntr As Long,level_coms_fail_cntr As Long,flow_coms_fail_cntr As Long
Public flow_tot_coms_fail_cntr As Long


'Declare Other Variables
Dim i,'rain24running(8640)

Units BatVolts = volts
Units PTemp = degC
Units Battery_950 = volts
Units Level_950 = inches
Units Flow_950 = cfs
Units Event_flow = cf
Units Flow_total_950 = cf
'Units rain = inches
'Units event_rain = inches
'Units twentyfourhr_rain = inches
'Units seasonal_rain = inches

'Define Data Tables
DataTable (sample_event,Successful_Smpl > 0.5,1000)
	Sample (1,Successful_Smpl,Long)
	Sample (1,Sample_pacing_volume,IEEE4)
	Sample (1,Flowrate_at_smpl_event,IEEE4)
	Totalize (1,SampleCounter,FP2,False)

	Sample (1,ModbusInterval,UINT2)
EndTable

DataTable (minute,1,-1)
	DataInterval (0,1,Min,10)
	Sample (1,Flow_950,IEEE4)
	Sample (1,Level_950,IEEE4)
	Sample (1,Flow_total_950,IEEE4)
	Sample (1,Sample_totalized_volume,IEEE4)
	Sample (1,Battery_950,FP2)
	Sample (1,Successful_Smpl,UINT2)
	Sample (1,Sample_pacing_volume,IEEE4)
	Sample (1,Attempted_smpl_events,FP2)
	Sample (1,ModbusInterval,UINT2)
EndTable

DataTable (hourly,1,-1)
	DataInterval (0,1,hr,10)
	Minimum (1,BatVolts,FP2,False,False)
	Totalize (1,Flow_950,IEEE4,False)
	Sample (1,battery_coms_fail_cntr,FP2)
	Sample (1,level_coms_fail_cntr,FP2)
	Sample (1,flow_coms_fail_cntr,FP2)
	Sample (1,flow_tot_coms_fail_cntr,FP2)
	Sample (1,ModbusInterval,UINT2)
EndTable

DataTable (daily,1,-1)
	DataInterval (0,1,hr,10)
	Minimum (1,BatVolts,FP2,False,False)
	Totalize (1,Flow_950,IEEE4,False)

EndTable

'Main Program
BeginProg
	SW12(1)

	ModbusInterval = 1

	'  For i = 1 To 8640
	'    rain24running(i) = 0
	'  Next i

	SerialOpen (ComSDC7,19200,10,0,500)

	Scan (10,Sec,10,0)

		PanelTemp (PTemp,250)
		Battery (BatVolts)

		'collect tipping bucket rainfall information dry contact between pins A & C of rain gauge
		'calculate running 24hr rain total
		'    twentyfourhr_rain = 0
		'    For i = 8640 To 2 Step -1
		'      rain24running(i) = rain24running(i-1)
		'    Next i
		'    PulseCount (rain,1,2,2,0,0.01,0)

		'    rain24running(1) = rain
		'    event_rain +=rain
		'    seasonal_rain += rain
		'    For i = 1 To 8640
		'      twentyfourhr_rain += rain24running(i)
		'    Next i


		'instruction to time stamp successful sample event
		PulseCount (Successful_Smpl,1,1,0,0,1.0,0)
		SampleCounter += Successful_Smpl

		'Call Output Tables
		CallTable (sample_event)
		CallTable (minute)
		CallTable (hourly)
		CallTable (daily)

		'reset section
		'    If seasonal_rain_reset Then
		'      seasonal_rain = 0
		'      seasonal_rain_reset = false
		'    EndIf
		'    If event_rain_reset Then
		'      event_rain = 0
		'      event_rain_reset = false
		'    EndIf

		If Sampling_Event_Reset Then
			Sampling_Event_Reset = false
			Interim_flow_total = 0
			SampleOn = false
			Event_flow_reset = true
			Sample_totalized_volume = 0
			Attempted_smpl_events_reset = true
		EndIf

		If Event_flow_reset Then
			Event_flow_reset = false
			Event_flow = 0
		EndIf
		If Attempted_smpl_events_reset Then
			Attempted_smpl_events_reset = false
			Attempted_smpl_events = 0
		EndIf
		If Sample_count_reset Then
			Sample_count_reset = false
			SampleCounter = 0
		EndIf

		If master_reset Then
			master_reset = 0
			'      seasonal_rain = 0
			'      event_rain = 0
			Event_flow = 0
			SampleCounter = 0
			Hach_flow_reset = true
		EndIf

	NextScan

	SlowSequence
	Scan (5,Sec,5,0)
		If IfTime (0,ModbusInterval,Sec) Then execute = TRUE

			If execute Then
			execute = false
			SerialOpen (ComSDC7,19200,10,0,500)
			Delay (1,250,mSec)
			'measure Hach 950 flowmeter - log flow, current flow rate, velocity, time/date
			'voltage, etc. @ 1-minute intervals

			'battery volts
			ModbusMaster (battery_coms_result,ModbusCom,19200,1,3,modbusdata(1),39,1,3,250,10)
			If battery_coms_result > 0 Then battery_coms_fail_cntr  += 1

			'level
			ModbusMaster (level_coms_result,ModbusCom,19200,1,3,modbusdata(2),7,1,3,250,10)
			If level_coms_result > 0 Then level_coms_fail_cntr  += 1

			'flow
			ModbusMaster (flow_coms_result,ModbusCom,19200,1,3,modbusdata(3),33,1,3,250,10)
			If flow_coms_result = 0 Then
				Event_flow += Flow_950 * ModbusInterval

				'send 25-500ms pulses to sampler @ 12Vdc on pins A&C at accumulation of 1000L
				If SampleOn Then
					Sample_totalized_volume += Flow_950 * ModbusInterval
					Interim_flow_total += Flow_950 * ModbusInterval
					If Interim_flow_total >= Sample_pacing_volume AND Sample_pacing_volume > 0 Then
						PortSet(1,1)
						Delay (1,500,mSec)
						PortSet (1,0)
						Attempted_smpl_events += 1
						Flowrate_at_smpl_event = Flow_950
						Interim_flow_total -= Sample_pacing_volume
					EndIf
				EndIf
			Else
				flow_coms_fail_cntr  += 1
			EndIf

			'total flow
			ModbusMaster (flow_tot_coms_result,ModbusCom,19200,1,3,modbusdata(4),75,1,3,250,10)
			If flow_tot_coms_result > 0 Then flow_tot_coms_fail_cntr += 1

			'total flow reset
			If Hach_flow_reset Then
				modbusdata(4) = 0
				ModbusMaster (flow_tot_reset_coms_result,ModbusCom,19200,1,6,modbusdata(4),75,1,3,250,10)
				Hach_flow_reset = false
			EndIf
		EndIf

	NextScan
EndProg


