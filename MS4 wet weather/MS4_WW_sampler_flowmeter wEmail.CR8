'AMEC FOSTER WHEELER
'MS-4 Wet Weather Monitoring

'CR800 Series Datalogger
'date: 1/6/2018
'program author: Messina

'Program objectives:
'
' Measure flow in cfs from Sigma 950 bubbler flowmeter
' Measure rain in inches from rain gauge connected to Sigma 950
' Trigger Hach SD900 Autosampler and receive success/non-success message

PreserveVariables


'Declare Public Variables

'AUTOSAMPLER
'Turn on sampling 
' ** it will still wait For a flow pulse which is sent programmatically)
Public SampleOn As Boolean
' Sample interval (e.g. 30min)
' in minutes
Public Sample_Interval_minutes = 10
Units Sample_Interval_minutes = Minutes 
' in seconds
Public Sample_Interval_seconds 
Units Sample_Interval_seconds = Seconds

' Set LevelTrigger based on Flowmeter data
Public Sample_LevelTrigger = 5
Units Sample_LevelTrigger = inches
Public Sampling_is_triggered As Boolean

' Sample interval counter 
Public Sample_Interval_counter = 0
Units Sample_Interval_counter = Seconds
' Countdown timer
Public Seconds_to_next_Sample As Long
Units Seconds_to_next_Sample = Seconds
Public Minutes_to_next_Sample As Float
Units Minutes_to_next_Sample = Minutes

' Keep track of when the CR800 sends the pulse
Public pulses_sent_to_sampler As Long
' Measure Bottle Number and Success Pulse from sampler
Public Bottle As Float
'Public Success As Float

' Panel Temperature and Battery Voltage
Public CR_Temp, CR_BatVolts
Units CR_BatVolts = volts
Units CR_Temp = degC


' FLOWMETER
' Data from Sigma 950 Flowmeter: Level(inches),Flow(cfs),TotalFlow(cf),Rain(inches)
Const ModbusCom1 = ComSDC7 'Modbus Address
Public AvgLevel_950 As Float
' Flowmeter data container (5 variables)
Public modbusdata(6)
' Battery
Alias modbusdata(1) = Battery_950
Units Battery_950 = volts
' Water Level
Alias modbusdata(2) = Level_950
Units Level_950 = inches
' Velocity 
Alias modbusdata(3) = Velocity_950
Units Velocity_950 = fps
' Flow
Alias modbusdata(4) = Flow_950
Units Flow_950 = cfs
' Total Flow
Alias modbusdata(5) = Flow_total_950
Units Flow_total_950 = cf
' Rain
Alias modbusdata(6) = rain_950
Units rain_950 = inches
' Rain Increment
Dim rain_950_previous
Public Rain_increment = 0.0
Units Rain_increment = inches

' PT data (if used)

' Send Pulse
Public Send_pulse As Boolean

' Level and Flow at time of sample
Public Level_at_Sample As Float
Units Level_at_Sample = inches
Public Flow_at_Sample As Float
Units Flow_at_Sample = cfs

' ALARMS
' Low Battery Alarm
Public BattEmailSuccess
Public BattAlarmIsOn As Boolean

' Level Alarm
Public LevelEmailSuccess
Public LevelAlarmIsOn As Boolean

' Test Alarm in field
Public TestEmailNotification As Boolean
Public TestEmailSuccess 

'Email stuff
Public Addressees(10) As String *52 = {"7149153360@txt.att.net","alex.messina@woodplc.com","8583428828@vtext.com"}
Public TXToAddr As String *530
Dim i
Public site_name As String * 20
Public Subject As String = "Alarm from " 
Const CRLF = CHR(13)+CHR(10)
Public Message As String * 250
Public ServerResponse As String * 50

' COMS FAILURES (For ModBus)
' Battery
Public battery_coms_result
Public battery_coms_fail_cntr As Long
' Water Level
Public level_coms_result
Public level_coms_fail_cntr As Long
' Velocity
Public velocity_coms_result
Public velocity_coms_fail_cntr As Long
' Flow
Public flow_coms_result
Public flow_coms_fail_cntr As Long
' Flow Total
Public flow_tot_coms_result
Public flow_tot_coms_fail_cntr As Long
' Rain
Public rain_coms_result
Public rain_coms_fail_cntr As Long

' RESETS
' Event reset
Public Event_reset As Boolean
' Flowmeter resets
Public Coms_results_reset As Boolean
' Autosampler resets
Public Sample_Interval_reset As Boolean
' Master resets
Public master_reset As Boolean

'DEFINE DATA TABLES

' COLLECT FLOW DATA ON MINUTELY INTERVAL
' MINUTE
DataTable (minute,1,-1)
	DataInterval (0,1,Min,10)
	' Flowmeter
	Average (1,Level_950,Float,False)
	Average (1,Velocity_950,Float,False)
	Average (1,Flow_950,Float,False)
	Sample (1,Flow_total_950,Float)
	Sample (1,Battery_950,FP2)
	Sample (1,rain_950,Float)
	Sample (1,Rain_increment,Float)
	' Sampler
	Sample (1,pulses_sent_to_sampler,Float)
	Sample (1,Bottle,FP2)
	Maximum (1,Bottle,Float,False,True)
  Sample (1,Sample_Interval_minutes,Float)
EndTable

' HOURLY
DataTable (hourly,1,-1)
	DataInterval (0,1,hr,10)
	' DATA
	Minimum (1,CR_BatVolts,FP2,False,False)
	Totalize (1,Flow_950,Float,False)
	Sample (1,rain_950,FP2)
	Totalize (1,Rain_increment,Float,False)
	
  ' COMS (record failures)
	Sample (1,battery_coms_fail_cntr,FP2)
	Sample (1,level_coms_fail_cntr,FP2)
	Sample (1,velocity_coms_fail_cntr,FP2)
	Sample (1,flow_coms_fail_cntr,FP2)
	Sample (1,flow_tot_coms_fail_cntr,FP2)
	Sample (1,rain_coms_fail_cntr,FP2)
EndTable

' DAILY
DataTable (daily,1,-1)
	DataInterval (0,24,hr,10)
	Minimum (1,CR_BatVolts,FP2,False,False)
	Totalize (1,Flow_950,Float,False)
	Sample (1,Level_950,Float)
	Sample (1,rain_950,Float)
	Totalize (1,Rain_increment,Float,False)
EndTable

' SAMPLE HISTORY (should be similar to Flowmeter readout)
DataTable (Sample_History,1,1000)
  ' Log pulses sent
  Sample (1,pulses_sent_to_sampler,Long)
  ' Flowmeter data
  Sample (1,Level_at_Sample,Float)
  Sample (1,Flow_at_Sample,Float)
  ' Log sample interval
  Sample (1,Sample_Interval_minutes,Float)
EndTable



'Main Program
BeginProg
  ' Turn on switched battery terminal (powers up modem)
	SW12(1)
	' Communicate through RS-232 with Flowmeter (Sigma 950)
	SerialOpen (ComSDC7,19200,10,0,500)
	site_name = "SITE"
	Subject = Subject + site_name
  SampleOn = False
  Sampling_is_triggered = False
  Send_pulse =False
	
	' Set countdown timer for first scan
	Sample_Interval_counter = 0
	Sample_Interval_minutes = 10
	Sample_Interval_seconds = Sample_Interval_minutes * 60
	Seconds_to_next_Sample = Sample_Interval_seconds
	Minutes_to_next_Sample = Seconds_to_next_Sample/60.0
	
  ' Set Scan interval for Pulse Counting (Longer so capture the whole pulse signal)
	Scan (60,Sec,0,0)
	  'Have bottle count outside of Do Loop so that the scan interval closes and records the bottle number, 
    ' and then have it ready to be recorded in the CallTable command
    
    ' Calculate minutely rain increment
    Rain_increment = rain_950 - rain_950_previous
    Rain_increment = Round(Rain_increment, 2)
    rain_950_previous = rain_950 ' store rain_950 for the next minute interval
    
    ' Measure Datalogger temperature and battery volts
		PanelTemp (CR_Temp,250)
		
    'Battery check and email Alert
		Battery (CR_BatVolts) 
    
    ' Low Battery Alarm
    If CR_BatVolts <= 11.8 AND BattAlarmIsOn = False Then
      ' Construct Message
      Message = " "
    	Message = Message + "Low battery alarm! "+ CRLF
    	Message = Message + "Currently: " + Round(CR_BatVolts,2) + " V " + CRLF 
    	Message = Message + "Datalogger time: " + Status.Timestamp
    	' Construct Address list
      TXToAddr = Addressees(1)
    	For i=2 To 10
        If Addressees(i)<>"" Then TXToAddr = TXToAddr & "," & Addressees(i)
      Next i
      'Send email if any addresses are present.
      If TXToAddr<>"" Then
    	  BattEmailSuccess = EmailRelay(TXToAddr,Subject,Message,ServerResponse)
    	EndIf
      If BattEmailSuccess = -1 Then
      	BattAlarmIsOn = True
      	BattEmailSuccess = 1
      EndIf
    EndIf
    
    ' Level Alarm
    If Level_950 >= Sample_LevelTrigger AND LevelAlarmIsOn = False Then
      ' Construct Message
      Message = " "
    	Message = Message + "Water Level alarm! "+ CRLF 
    	Message = Message + "Currently: " + Round(Level_950,2) + " in" + CRLF 
    	Message = Message + "Datalogger time: " + Status.Timestamp
    	' Construct Address list
      TXToAddr = Addressees(1)
    	For i=2 To 10
        If Addressees(i)<>"" Then TXToAddr = TXToAddr & "," & Addressees(i)
      Next i
      'Send email if any addresses are present.
      If TXToAddr<>"" Then
    	  LevelEmailSuccess = EmailRelay(TXToAddr,Subject,Message,ServerResponse)
    	EndIf
      If LevelEmailSuccess = -1 Then
      	LevelAlarmIsOn = True
      	LevelEmailSuccess = 1
      EndIf
    EndIf
    
    If TestEmailNotification = True Then
      ' Construct Message
      Message = " "
    	Message = Message + "This is just a test..."+ CRLF
      ' Construct Address list
      TXToAddr = Addressees(1)
    	For i=2 To 10
        If Addressees(i)<>"" Then TXToAddr = TXToAddr & "," & Addressees(i)
      Next i
      'Send email if any addresses are present.
      If TXToAddr<>"" Then
    	  TestEmailSuccess = EmailRelay(TXToAddr,Subject,Message,ServerResponse)
    	EndIf
      If TestEmailSuccess = -1 Then
      	TestEmailNotification = False ' Turn off the notifier if successful
      	TestEmailSuccess = 1
      EndIf
    EndIf

    'Pin F - Bottle Number - counts
    PulseCount (Bottle,1,1,0,0,1.0,0)
    ' It counts the rise after the pulses so count back one to remove
    If Bottle >= 2 Then Bottle -= 1 
    
    'Pin E - Sample Success - pulse length
		'frequency = Success CHANGE WHEN WE GET WORKING CODE
    'PulseCount (Success,1,2,1,0,1.0,0)
    'TimerIO(timer_io,1111,0200,30,1)
   
    'CALL OUTPUT TABLES at least every minute
  	CallTable minute
  	CallTable hourly
  	CallTable daily
    
  NextScan
  
  ' Set Scan interval for Pulse Counting (Shorter so update Flowmeter values more often)
  SlowSequence
	Scan (5,Sec,0,0)
    ' Calculate Sample Interval in seconds
	  Sample_Interval_seconds = Sample_Interval_minutes * 60	  
	  Minutes_to_next_Sample = Seconds_to_next_Sample / 60.0
    ' count up to sample
    Sample_Interval_counter += 5  
    ' count down to sample
    Seconds_to_next_Sample -= 5

		' Open Serial connection to Flowmeter, delay to let it connect
		SerialOpen (ComSDC7,19200,10,0,500)
		Delay (1,250,mSec)
		'------------------------------------------------------
		'Hach 950 - connected to CS105 w/SDC7 address
		'measure Hach 950 flowmeter - log current flow rate, total flow, time/date
		'voltage, etc. @ 5-sec intervals, log @ 1-minute intervals
	
		' BATT VOLTS
		ModbusMaster (battery_coms_result,ModbusCom1,19200,1,3,Battery_950,39,1,3,250,10)
		If battery_coms_result > 0 Then battery_coms_fail_cntr += 1
		
		' LEVEL
		ModbusMaster (level_coms_result,ModbusCom1,19200,1,3,Level_950,7,1,3,250,10)
		If level_coms_result > 0 Then level_coms_fail_cntr  += 1
		
    'velocity
		ModbusMaster (velocity_coms_result,ModbusCom1,19200,1,3,Velocity_950,9,1,3,250,10)
		If velocity_coms_result > 0 Then velocity_coms_fail_cntr  += 1
  
		' FLOW
		ModbusMaster (flow_coms_result,ModbusCom1,19200,1,3,Flow_950,33,1,3,250,10)
		If flow_coms_result > 0 Then flow_coms_fail_cntr += 1
		
		' TOTAL FLOW
		ModbusMaster (flow_tot_coms_result,ModbusCom1,19200,1,3,Flow_total_950,75,1,3,250,10)
		If flow_tot_coms_result > 0 Then flow_tot_coms_fail_cntr += 1
		
		' RAIN
		ModbusMaster (rain_coms_result,ModbusCom1,19200,1,3,rain_950,3,1,3,250,10)
		If rain_coms_result > 0 Then rain_coms_fail_cntr += 1
    
    

    ' Every 5 Sec scan for Level_Trigger: if TRUE, (AND SampleOn is on, then send pulse to Autosampler
    '                                     if FALSE, don't do anything
  	'---------------------------------------------------------------------------
  	'Hach SD900 Autosampler - trigger sample, log success/non-success, log bottle number
    'send 25-500ms pulses to sampler @ 12Vdc on pins A&C at time intervals once FlowTrigger is reached
    
    
    'Calculate the running Avg of Level_950 to smooth out level spikes
    AvgRun(AvgLevel_950,1,Level_950,12) '12 x 5 sec = 1min.    
    
    ' If Level_950 is above LevelTrigger, and sampling is not already started, then start Sampling
    ' This triggers the first sample, and resets the sample interval counter so that sampling commences
    If AvgLevel_950 >= Sample_LevelTrigger AND Sampling_is_triggered = False Then 
      Sampling_is_triggered = True
      Send_pulse = True
      ' Start the sample interval counting from now
      Sample_Interval_counter = 0
      ' Set countdown to interval
      Seconds_to_next_Sample = Sample_Interval_seconds
      Minutes_to_next_Sample = Seconds_to_next_Sample / 60.0
    EndIf
  
    ' If the sample interval counter reaches the interval but no sample should be taken, just reset the counter
    If Sample_Interval_counter >= Sample_Interval_seconds AND Sampling_is_triggered = False Then
      ' Reset Sample Interval counter to zero
      Sample_Interval_counter = 0
      ' Set countdown to interval
      Seconds_to_next_Sample = Sample_Interval_seconds
      Minutes_to_next_Sample = Seconds_to_next_Sample / 60.0
    EndIf  
    
    ' If the sample interval counter reaches the interval AND a sample should be taken, 
    '   reset the counter AND send pulse (by setting Send_pulse to TRUE)
    ' This triggers all subsequent samples
    If Sample_Interval_counter >= Sample_Interval_seconds AND Sampling_is_triggered = True Then
      Send_pulse = True
    EndIf
    

    ' Conditional to trigger sampler
    If SampleOn = TRUE AND Send_pulse = TRUE Then
      ' Turn off for next scan
      Send_pulse = False
      
      'Send pulse by turning Port on
      PortSet(1,1)
      'keep sending pulse for 500mSec
      Delay (1,500,mSec)
      'Turn Port off
      PortSet (1,0)
      
      ' Reset Sample Interval counter to zero
      Sample_Interval_counter = 0
      ' Set countdown to interval
      Seconds_to_next_Sample = Sample_Interval_seconds
      Minutes_to_next_Sample = Seconds_to_next_Sample / 60.0

      'Count up for attempted events
      pulses_sent_to_sampler += 1
      
      ' Record Level and Flow at time of sample
      Level_at_Sample = Level_950
      Flow_at_Sample = Flow_950
      
      CallTable Sample_History
    EndIf		
    
	NextScan
	
	
  SlowSequence
  Scan(10,Sec,0,0)
    ' RESETS
    If Event_reset Then
      Event_reset = false
      Coms_results_reset = true
      
      LevelAlarmIsOn = False
      
      ' Sample Interval stuff
      Sample_Interval_minutes = 10
      Sample_Interval_seconds = Sample_Interval_minutes * 60
      Seconds_to_next_Sample = Sample_Interval_seconds
      Minutes_to_next_Sample = Sample_Interval_minutes  
      
      ' Sampler stuff
      SampleOn = false
      Send_pulse = false
      Sampling_is_triggered = false
      pulses_sent_to_sampler = 0 
      
      'Event data
      Rain_increment = 0.0
      rain_950_previous = rain_950
    EndIf

    If Sample_Interval_reset Then
      Sample_Interval_reset = false
      Sample_Interval_minutes = 10
      Sample_Interval_seconds = Sample_Interval_minutes * 60
      Seconds_to_next_Sample = Sample_Interval_seconds
      Minutes_to_next_Sample = Sample_Interval_minutes  
    EndIf  
    
    If Coms_results_reset Then
      Coms_results_reset = false
      battery_coms_fail_cntr = 0
      level_coms_fail_cntr = 0
      velocity_coms_fail_cntr = 0
      flow_coms_fail_cntr = 0
      flow_tot_coms_fail_cntr = 0
      rain_coms_fail_cntr = 0
    EndIf    
 

    If master_reset Then
      master_reset = false
      ' Sample Interval stuff
      Sample_Interval_minutes = 10
      Sample_Interval_seconds = Sample_Interval_minutes * 60
      Seconds_to_next_Sample = Sample_Interval_seconds
      Minutes_to_next_Sample = Sample_Interval_minutes  
      
      ' Sampler stuff
      SampleOn = false
      Sampling_is_triggered = false
      pulses_sent_to_sampler = 0 
      
      ' Coms stuff
      battery_coms_fail_cntr = 0
      level_coms_fail_cntr = 0
      velocity_coms_fail_cntr = 0
      flow_coms_fail_cntr = 0
      flow_tot_coms_fail_cntr = 0
      rain_coms_fail_cntr = 0
      
      'Event data
      Rain_increment = 0
      rain_950_previous = rain_950
      
    EndIf
	NextScan
	


 
EndProg

